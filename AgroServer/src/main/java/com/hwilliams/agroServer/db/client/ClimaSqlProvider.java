package com.hwilliams.agroServer.db.client;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.ORDER_BY;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT_DISTINCT;
import static org.apache.ibatis.jdbc.SqlBuilder.SET;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.UPDATE;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import com.hwilliams.agroServer.db.model.Clima;
import com.hwilliams.agroServer.db.model.ClimaExample.Criteria;
import com.hwilliams.agroServer.db.model.ClimaExample.Criterion;
import com.hwilliams.agroServer.db.model.ClimaExample;
import java.util.List;
import java.util.Map;

public class ClimaSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table clima
     *
     * @mbggenerated Fri May 27 21:07:43 ART 2016
     */
    public String countByExample(ClimaExample example) {
        BEGIN();
        SELECT("count(*)");
        FROM("clima");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table clima
     *
     * @mbggenerated Fri May 27 21:07:43 ART 2016
     */
    public String deleteByExample(ClimaExample example) {
        BEGIN();
        DELETE_FROM("clima");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table clima
     *
     * @mbggenerated Fri May 27 21:07:43 ART 2016
     */
    public String insertSelective(Clima record) {
        BEGIN();
        INSERT_INTO("clima");
        
        if (record.getLatitud() != null) {
            VALUES("latitud", "#{latitud,jdbcType=REAL}");
        }
        
        if (record.getLongitud() != null) {
            VALUES("longitud", "#{longitud,jdbcType=REAL}");
        }
        
        if (record.getTemperatura() != null) {
            VALUES("temperatura", "#{temperatura,jdbcType=SMALLINT}");
        }
        
        if (record.getSensacionTermica() != null) {
            VALUES("sensacion_termica", "#{sensacionTermica,jdbcType=SMALLINT}");
        }
        
        if (record.getDescripcion() != null) {
            VALUES("descripcion", "#{descripcion,jdbcType=VARCHAR}");
        }
        
        if (record.getViento() != null) {
            VALUES("viento", "#{viento,jdbcType=SMALLINT}");
        }
        
        if (record.getHumedad() != null) {
            VALUES("humedad", "#{humedad,jdbcType=SMALLINT}");
        }
        
        if (record.getProbabilidadLluvia() != null) {
            VALUES("probabilidad_lluvia", "#{probabilidadLluvia,jdbcType=SMALLINT}");
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table clima
     *
     * @mbggenerated Fri May 27 21:07:43 ART 2016
     */
    public String selectByExample(ClimaExample example) {
        BEGIN();
        if (example != null && example.isDistinct()) {
            SELECT_DISTINCT("latitud");
        } else {
            SELECT("latitud");
        }
        SELECT("longitud");
        SELECT("temperatura");
        SELECT("sensacion_termica");
        SELECT("descripcion");
        SELECT("viento");
        SELECT("humedad");
        SELECT("probabilidad_lluvia");
        FROM("clima");
        applyWhere(example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            ORDER_BY(example.getOrderByClause());
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table clima
     *
     * @mbggenerated Fri May 27 21:07:43 ART 2016
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        Clima record = (Clima) parameter.get("record");
        ClimaExample example = (ClimaExample) parameter.get("example");
        
        BEGIN();
        UPDATE("clima");
        
        if (record.getLatitud() != null) {
            SET("latitud = #{record.latitud,jdbcType=REAL}");
        }
        
        if (record.getLongitud() != null) {
            SET("longitud = #{record.longitud,jdbcType=REAL}");
        }
        
        if (record.getTemperatura() != null) {
            SET("temperatura = #{record.temperatura,jdbcType=SMALLINT}");
        }
        
        if (record.getSensacionTermica() != null) {
            SET("sensacion_termica = #{record.sensacionTermica,jdbcType=SMALLINT}");
        }
        
        if (record.getDescripcion() != null) {
            SET("descripcion = #{record.descripcion,jdbcType=VARCHAR}");
        }
        
        if (record.getViento() != null) {
            SET("viento = #{record.viento,jdbcType=SMALLINT}");
        }
        
        if (record.getHumedad() != null) {
            SET("humedad = #{record.humedad,jdbcType=SMALLINT}");
        }
        
        if (record.getProbabilidadLluvia() != null) {
            SET("probabilidad_lluvia = #{record.probabilidadLluvia,jdbcType=SMALLINT}");
        }
        
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table clima
     *
     * @mbggenerated Fri May 27 21:07:43 ART 2016
     */
    public String updateByExample(Map<String, Object> parameter) {
        BEGIN();
        UPDATE("clima");
        
        SET("latitud = #{record.latitud,jdbcType=REAL}");
        SET("longitud = #{record.longitud,jdbcType=REAL}");
        SET("temperatura = #{record.temperatura,jdbcType=SMALLINT}");
        SET("sensacion_termica = #{record.sensacionTermica,jdbcType=SMALLINT}");
        SET("descripcion = #{record.descripcion,jdbcType=VARCHAR}");
        SET("viento = #{record.viento,jdbcType=SMALLINT}");
        SET("humedad = #{record.humedad,jdbcType=SMALLINT}");
        SET("probabilidad_lluvia = #{record.probabilidadLluvia,jdbcType=SMALLINT}");
        
        ClimaExample example = (ClimaExample) parameter.get("example");
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table clima
     *
     * @mbggenerated Fri May 27 21:07:43 ART 2016
     */
    protected void applyWhere(ClimaExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            WHERE(sb.toString());
        }
    }
}